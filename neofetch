#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
# shellcheck source=/dev/null
# shellcheck disable=2009

Domain="domain.kku.ac.kr"
Email="email@kku.ac.kr"
disk_available=('/')

version=7.1.0
bash_version=${BASH_VERSINFO[0]:-5}
sys_locale=${LANG:-C}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config}
PATH=$PATH:/usr/xpg4/bin:/usr/sbin:/sbin:/usr/etc:/usr/libexec
shopt -s nocasematch
LC_ALL=C
LANG=C
export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/

get_kernel() {
    kernel=$kernel_version
}
get_uptime() {
    if [[ -r /proc/uptime ]]; then
        s=$(< /proc/uptime)
        s=${s/.*}
    else
        boot=$(date -d"$(uptime -s)" +%s)
        now=$(date +%s)
        s=$((now - boot))
    fi
    d="$((s / 60 / 60 / 24)) days"
    h="$((s / 60 / 60 % 24)) hours"
    m="$((s / 60 % 60)) minutes"
    ((${d/ *} == 1)) && d=${d/s}
    ((${h/ *} == 1)) && h=${h/s}
    ((${m/ *} == 1)) && m=${m/s}
    ((${d/ *} == 0)) && unset d
    ((${h/ *} == 0)) && unset h
    ((${m/ *} == 0)) && unset m
    uptime=${d:+$d, }${h:+$h, }$m
    uptime=${uptime%', '}
    uptime=${uptime:-$s seconds}
    uptime=${uptime/ days/d}
    uptime=${uptime/ day/d}
    uptime=${uptime/ hours/h}
    uptime=${uptime/ hour/h}
    uptime=${uptime/ minutes/m}
    uptime=${uptime/ minute/m}
    uptime=${uptime/ seconds/s}
    uptime=${uptime//,}
}
get_shell() {
    [[ $BASH_VERSION ]] ||
        BASH_VERSION=$("$SHELL" -c "printf %s \"\$BASH_VERSION\"")
    shell+=${BASH_VERSION/-*}
    shell=${shell/, version}
    shell=${shell/xonsh\//xonsh }
    shell=${shell/options*}
    shell=${shell/\(*\)}
}
get_cpu() {
    cpu_file="/proc/cpuinfo"
    case $kernel_machine in
        "frv" | "hppa" | "m68k" | "openrisc" | "or"* | "powerpc" | "ppc"* | "sparc"*)
            cpu="$(awk -F':' '/^cpu\t|^CPU/ {printf $2; exit}' "$cpu_file")"
        ;;
        "s390"*)
            cpu="$(awk -F'=' '/machine/ {print $4; exit}' "$cpu_file")"
        ;;
        "ia64" | "m32r")
            cpu="$(awk -F':' '/model/ {print $2; exit}' "$cpu_file")"
            [[ -z "$cpu" ]] && cpu="$(awk -F':' '/family/ {printf $2; exit}' "$cpu_file")"
        ;;
        *)
            cpu="$(awk -F '\\s*: | @' \
                    '/model name|Hardware|Processor|^cpu model|chip type|^cpu type/ {
                    cpu=$2; if ($1 == "Hardware") exit } END { print cpu }' "$cpu_file")"
        ;;
    esac
    speed_dir="/sys/devices/system/cpu/cpu0/cpufreq"
    for temp_dir in /sys/class/hwmon/*; do
        [[ "$(< "${temp_dir}/name")" =~ (cpu_thermal|coretemp|fam15h_power|k10temp) ]] && {
            temp_dirs=("$temp_dir"/temp*_input)
            temp_dir=${temp_dirs[0]}
            break
        }
    done
    if [[ -d "$speed_dir" ]]; then
        speed="$(< "${speed_dir}/bios_limit")" ||\
        speed="$(< "${speed_dir}/scaling_max_freq")" ||\
        speed="$(< "${speed_dir}/cpuinfo_max_freq")"
        speed="$((speed / 1000))"
    else
        case $kernel_machine in
            "sparc"*)
                speed_file="/sys/devices/system/cpu/cpu0/clock_tick"
                speed="$(($(< "$speed_file") / 1000000))"
            ;;
            *)
                speed="$(awk -F ': |\\.' '/cpu MHz|^clock/ {printf $2; exit}' "$cpu_file")"
                speed="${speed/MHz}"
            ;;
        esac
    fi
    [[ -f "$temp_dir" ]] && deg="$(($(< "$temp_dir") * 100 / 10000))"
    cpu="${cpu//(TM)}"
    cpu="${cpu//(tm)}"
    cpu="${cpu//(R)}"
    cpu="${cpu//(r)}"
    cpu="${cpu//CPU}"
    cpu="${cpu//Processor}"
    cpu="${cpu//Dual-Core}"
    cpu="${cpu//Quad-Core}"
    cpu="${cpu//Six-Core}"
    cpu="${cpu//Eight-Core}"
    cpu="${cpu//[1-9][0-9]-Core}"
    cpu="${cpu//[0-9]-Core}"
    cpu="${cpu//, * Compute Cores}"
    cpu="${cpu//Core / }"
    cpu="${cpu//(\"AuthenticAMD\"*)}"
    cpu="${cpu//with Radeon * Graphics}"
    cpu="${cpu//, altivec supported}"
    cpu="${cpu//FPU*}"
    cpu="${cpu//Chip Revision*}"
    cpu="${cpu//Technologies, Inc}"
    cpu="${cpu//Core2/Core 2}"
    cores="${cores//[[:space:]]}"
    speed="${speed//[[:space:]]}"
    if [[ "$deg" ]]; then
        deg="${deg//.}"
        deg="[${deg/${deg: -1}}.${deg: -1}Â°${C:-C}]"
        cpu="$cpu $deg"
    fi
}
get_gpu() {
    gpu_cmd="$(lspci -mm |
                awk -F '\"|\" \"|\\(' \
                        '/"Display|"3D|"VGA/ {
                            a[$0] = $1 " " $3 " " ($(NF-1) ~ /^$|^Device [[:xdigit:]]+$/ ? $4 : $(NF-1))
                        }
                        END { for (i in a) {
                            if (!seen[a[i]]++) {
                                sub("^[^ ]+ ", "", a[i]);
                                print a[i]
                            }
                        }}')"
    IFS=$'\n' read -d "" -ra gpus <<< "$gpu_cmd"
    [[ "${gpus[0]}" == *Intel* && "${gpus[1]}" == *Intel* ]] && unset -v "gpus[0]"
    for gpu in "${gpus[@]}"; do
        case $gpu in
            *"Advanced"*)
                brand="${gpu/*AMD*ATI*/AMD ATI}"
                brand="${brand:-${gpu/*AMD*/AMD}}"
                brand="${brand:-${gpu/*ATI*/ATi}}"

                gpu="${gpu/\[AMD\/ATI\] }"
                gpu="${gpu/\[AMD\] }"
                gpu="${gpu/OEM }"
                gpu="${gpu/Advanced Micro Devices, Inc.}"
                gpu="${gpu/*\[}"
                gpu="${gpu/\]*}"
                gpu="$brand $gpu"
            ;;
            *"NVIDIA"*)
                gpu="${gpu/*\[}"
                gpu="${gpu/\]*}"
                gpu="NVIDIA $gpu"
            ;;
            *"Intel"*)
                gpu="${gpu/*Intel/Intel}"
                gpu="${gpu/\(R\)}"
                gpu="${gpu/Corporation}"
                gpu="${gpu/ \(*}"
                gpu="${gpu/Integrated Graphics Controller}"
                gpu="${gpu/*Xeon*/Intel HD Graphics}"

                [[ -z "$(trim "$gpu")" ]] && gpu="Intel Integrated Graphics"
            ;;
            *"MCST"*)
                gpu="${gpu/*MCST*MGA2*/MCST MGA2}"
            ;;
            *"VirtualBox"*)
                gpu="VirtualBox Graphics Adapter"
            ;;
            *) continue ;;
        esac
        prin "${subtitle:+${subtitle}${gpu_name}}" "$gpu"
    done
    return
}

get_memory() {
    while IFS=":" read -r a b; do
        case $a in
            "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
            "Shmem") ((mem_used+=${b/kB}))  ;;
            "MemFree" | "Buffers" | "Cached" | "SReclaimable")
                mem_used="$((mem_used-=${b/kB}))"
            ;;
            "MemAvailable")
                mem_avail=${b/kB}
            ;;
        esac
    done < /proc/meminfo
    if [[ $mem_avail ]]; then
        mem_used=$(((mem_total - mem_avail) / 1024))
    else
        mem_used="$((mem_used / 1024))"
    fi
    mem_total="$((mem_total / 1024))"
    ((mem_perc = mem_used * 100 / mem_total))
    memory="${mem_used}${mem_label:-MiB} / ${mem_total}${mem_label:-MiB} ${mem_perc:+(${mem_perc}%)}"
    memory="$(bar "${mem_used}" "${mem_total}")${info_color} ${memory}"
}

get_disk() {
    type -p df &>/dev/null ||
        { err "Disk requires 'df' to function. Install 'df' to get disk info."; return; }
    df_version=$(df --version 2>&1)
    case $df_version in
        *IMitv*)   df_flags=(-P -g) ;;
        *befhikm*) df_flags=(-P -k) ;;
        *hiklnP*)  df_flags=(-h)   ;;
        *Tracker*)
            err "Your version of df cannot be used due to the non-standard flags"
            return
        ;;
        *) df_flags=(-P -h) ;;
    esac
    IFS=$'\n' read -d "" -ra disks <<< "$(df "${df_flags[@]}" "${disk_available[@]:-/}")"
    unset "disks[0]"
    [[ ${disks[*]} ]] || {
        err "Disk: df failed to print the disks, make sure the disk_available array is set properly."
        return
    }
    for disk in "${disks[@]}"; do
        IFS=" " read -ra disk_info <<< "$disk"
        disk_perc=${disk_info[${#disk_info[@]} - 2]/\%}
        case $df_version in
            *befhikm*)
                disk=$((disk_info[${#disk_info[@]} - 4] / 1024 / 1024))G
                disk+=" / "
                disk+=$((disk_info[${#disk_info[@]} - 5] / 1024/ 1024))G
                disk+=${disk_perc:+ ($disk_perc%)}
            ;;
            *)
                disk=${disk_info[${#disk_info[@]} - 4]/i}
                disk+=" / "
                disk+=${disk_info[${#disk_info[@]} - 5]/i}
                disk+=${disk_perc:+ ($disk_perc%)}
            ;;
        esac
        disk_sub=${disk_info[${#disk_info[@]} - 1]}
        disk="$(bar "$disk_perc" "100")${info_color} $disk"
        if [[ "$subtitle" ]]; then
            prin "$subtitle${disk_sub:+ ($disk_sub)}" "$disk"
        else
            prin "$disk_sub" "$disk"
        fi
    done
}

info() {
    [[ "$2" ]] && subtitle="$1"
    unset -v prin
    "get_${2:-$1}"
    [[ "$prin" ]] && return
    if [[ "$2" ]]; then
        output="$(trim "${!2}")"
    else
        output="$(trim "${!1}")"
    fi
    if [[ "$2" && "${output// }" ]]; then
        prin "$1" "$output"
    elif [[ "${output// }" ]]; then
        prin "$output"
    else
        err "Info: Couldn't detect ${1}."
    fi
    unset -v subtitle
}

prin() {
    if [[ "$(trim "$1")" && "$2" ]]; then
        [[ "$json" ]] && { printf '    %s\n' "\"${1}\": \"${2}\","; return; }
        string="${1}${2:+: $2}"
    else
        string="${2:-$1}"
        local subtitle_color="$info_color"
    fi
    string="$(trim "${string//$'\e[0m'}")"
    length="$(strip_sequences "$string")"
    length="${#length}"
    string="${string/:/$'\e[0m'${colon_color}:${info_color}}"
    string="${subtitle_color}\e[1m${string}"
    printf '%b\n' "${text_padding:+\e[${text_padding}C}${zws}${string//\\n}\e[0m "
    ((++info_height))
    prin=1
}

get_underline() {
    printf -v underline "%${length}s"
    printf '%b%b\n' "${text_padding:+\e[${text_padding}C}${zws}${underline_color}" \
                    "${underline// /-}\e[0m "
    ((++info_height))
    length=
    prin=1
}
trim() {
    set -f
    set -- $*
    printf '%s\n' "${*//[[:space:]]/}"
    set +f
}
strip_sequences() {
    strip="${1//$'\e['3[0-9]m}"
    strip="${strip//$'\e['[0-9]m}"
    strip="${strip//\\e\[[0-9]m}"
    strip="${strip//$'\e['38\;5\;[0-9]m}"
    strip="${strip//$'\e['38\;5\;[0-9][0-9]m}"
    strip="${strip//$'\e['38\;5\;[0-9][0-9][0-9]m}"
    printf '%s\n' "$strip"
}
set_colors() {
    c1="$(color "$1")\e[1m"
    c2="$(color "$2")\e[1m"
    c3="$(color "$3")\e[1m"
    c4="$(color "$4")\e[1m"
    c5="$(color "$5")\e[1m"
    c6="$(color "$6")\e[1m"
    title_color="\e[0m"
    subtitle_color="\e[0m"
    underline_color="\e[0m"
    colon_color="\e[0m"
    info_color="\e[0m"
}
color() {
    case $1 in
        [0-6])    printf '%b\e[3%sm'   "\e[0m" "$1" ;;
        7 | "fg") printf '\e[37m%b'    "\e[0m" ;;
        *)        printf '\e[38;5;%bm' "$1" ;;
    esac
}
err() {
    err+="$(color 1)[!]$'\e[0m' $1"
}
bar() {
    elapsed="$(($1 * 15 / $2))"
    printf -v prog  "%${elapsed}s"
    printf -v total "%$((15 - elapsed))s"
    bar+="$(color 3)${prog// /'â '}"
    bar+="$(color 8)${total// /'â '}"
    printf "%b" "${bar}${info_color}"
}

main() {
    IFS=" " read -ra uname <<< "$(uname -srm)"
    kernel_name="${uname[0]}"
    kernel_version="${uname[1]}"
    kernel_machine="${uname[2]}"
    eval "$config"
    [[ $verbose != on ]] && exec 2>/dev/null
    [[ $distro ]] && return
    for file in /etc/lsb-release /usr/lib/os-release \
                /etc/os-release  /etc/openwrt_release; do
        source "$file" && break
    done
    distro="${PRETTY_NAME:-${DISTRIB_DESCRIPTION}} ${UBUNTU_CODENAME}"
    [[ $distro ]] || distro="Linux (Unknown)"
    machine_arch=$kernel_machine
    set_colors fg 8 3
    ascii_data='${c2}            #####
    ${c2}       #######
    ${c2}       ##${c1}O${c2}#${c1}O${c2}##
    ${c2}       #${c3}#####${c2}#
    ${c2}     ##${c1}##${c3}###${c1}##${c2}##
    ${c2}    #${c1}##########${c2}##
    ${c2}   #${c1}############${c2}##
    ${c2}   #${c1}############${c2}###
    ${c3}  ##${c2}#${c1}###########${c2}##${c3}#
    ${c3}######${c2}#${c1}#######${c2}#${c3}######
    ${c3}#######${c2}#${c1}#####${c2}#${c3}#######
    ${c3}  #####${c2}#######${c3}#####'
    LC_ALL="$sys_locale"
    while IFS=$'\n' read -r line; do
        line=${line//\\\\/\\}
        line=${line//â/ }
        ((++lines,${#line}>ascii_len)) && ascii_len="${#line}"
    done <<< "${ascii_data//\$\{??\}}"
    ((lines==1)) && {
        lines=
        ascii_len=
        return
    }
    ascii_data="${ascii_data//\$\{c1\}/$c1}"
    ascii_data="${ascii_data//\$\{c2\}/$c2}"
    ascii_data="${ascii_data//\$\{c3\}/$c3}"
    ascii_data="${ascii_data//\$\{c4\}/$c4}"
    ascii_data="${ascii_data//\$\{c5\}/$c5}"
    ascii_data="${ascii_data//\$\{c6\}/$c6}"
    ((text_padding=ascii_len+3))
    printf '%b\n' "${ascii_data}\e[0m"
    LC_ALL=C
    printf '\e[%sA\e[9999999D' "${lines:-0}"
    prin "$(color 1)$Domain"
    info underline
    info "OS" distro
    info "Kernel" kernel
    info "Shell" shell
    info "CPU" cpu
    info "GPU" gpu
    prin ""
    info "Uptime" uptime
    info "Memory" memory
    info "Disk" disk
    prin ""
    prin "Contact: $Email"
    ((lines=(height) / font_height + 1))
    ((lines=lines>info_height?lines-info_height+1:1))
    printf -v nlines "%${lines}s"
    printf "%b" "${nlines// /\\n}"
    err "Neofetch command: $0 $*"
    [[ $verbose == on ]] && printf '%b\033[m' "$err" >&2
    return 0
}
main "$@"